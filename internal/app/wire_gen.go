// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package app

import (
	"context"
	"github.com/literaen/simple_project/pkg/postgres"
	"github.com/literaen/simple_project/pkg/redis"
	"github.com/literaen/simple_project/users/internal/config"
	"github.com/literaen/simple_project/users/internal/grpc/client"
	"github.com/literaen/simple_project/users/internal/grpc/handler"
	"github.com/literaen/simple_project/users/internal/grpc/server"
	"github.com/literaen/simple_project/users/internal/outbox"
	"github.com/literaen/simple_project/users/internal/users"
	"time"
)

// Injectors from wire.go:

func InitApp() (*App, error) {
	configConfig := config.LoadEnv()
	db_CREDS := config.ProvideDBCreds(configConfig)
	gdb, err := postgres.NewGDB(db_CREDS)
	if err != nil {
		return nil, err
	}
	outBoxRepository := outbox.NewOutBoxRepository(gdb)
	outBoxService := outbox.NewOutBoxService(configConfig, outBoxRepository)
	outboxWorker := outbox.NewOutboxWorker(outBoxService)
	redis_CREDS := config.ProvideRedisCreds(configConfig)
	rdb := redis.NewRDB(redis_CREDS)
	userRepository := users.NewUserRepository(gdb, rdb)
	taskGRPCClient := grpcclients.NewTaskGRPCClient(configConfig)
	userService := users.NewUserService(userRepository, outBoxService, taskGRPCClient)
	userHandler := grpchandler.NewUserHandler(userService)
	userGRPCServer := grpcserver.NewUserGRPCServer(configConfig, userHandler)
	app := newApp(configConfig, gdb, outboxWorker, userHandler, userGRPCServer)
	return app, nil
}

// wire.go:

type App struct {
	Config          *config.Config
	UserGRPCHandler *grpchandler.UserHandler
	UserGRPCServer  *grpcserver.UserGRPCServer
}

func newApp(config2 *config.Config,
	gdb *postgres.GDB,
	outboxWorker *outbox.OutboxWorker,
	grpcUserHandler *grpchandler.UserHandler,
	taskGRPCServer *grpcserver.UserGRPCServer,
) *App {
	outbox.Migrate(gdb.DB)
	users.Migrate(gdb.DB)

	go outboxWorker.Start(context.TODO(), 5*time.Second, 10)

	return &App{
		Config:          config2,
		UserGRPCHandler: grpcUserHandler,
		UserGRPCServer:  taskGRPCServer,
	}
}
